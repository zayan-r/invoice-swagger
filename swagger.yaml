---
swagger: "2.0"
info:
  title: Sleeper Agents API Routes
  description: "This is a document containing the routes used in our API for invoice rendering"
  version: '2.0'
tags:
- name: "Rendering"
  description: "Routes for rendering invoices"
- name: "Authentication"
  description: "Authenticating users"
host: sleeperagents1.alwaysdata.net
paths:
  /renderHTML:
    post:
      tags:
        - "Rendering"
      summary: "Render an HTML file from an inputted XML file"
      description: "This route accepts an XML file containing invoice information, generates HTML content based on it, and optionally translates it into different languages."
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - in: header
          name: token
          required: true
          type: string
          description: "Authorization token for accessing the endpoint."
        - in: formData
          name: invoice
          required: true
          type: file
          description: "XML file containing invoice information."
        - in: query
          name: language
          required: false
          type: string
          description: "Language for translating the HTML content (optional). Supported languages: { english, spanish, vietnamese }."
          enum: ["english", "spanish", "vietnamese"]
      responses:
        200:
          description: "Successful operation. HTML content generated."
          schema:
            type: "object"
            properties:
              html_content:
                type: "string"
                example: "<div><h2>Invoice Information</h2><p>ID</p><p>Issue Date:</p></div>"
                description: "HTML content generated from the input XML file."
        400:
          description: |
            If any of the following conditions are true:
            - The XML file is invalid.
            - The language is invalid or not supported.
            - The token is invalid.
          schema:
            $ref: '#/definitions/ErrorReturn'
  /renderPDF:
    post:
      tags:
        - "Rendering"
      summary: "Render a PDF file from an inputted XML file"
      description: ""
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - in: header
          name: token
          required: true
          type: string
          description: "Authorization token for accessing the endpoint."
        - in: formData
          name: invoice
          required: true
          type: file
          description: "XML file containing invoice information."
        - in: query
          name: language
          required: false
          type: string
          description: "Language for rendering the PDF (english, spanish, vietnamese). Defaults to english."
          enum: ["english", "spanish", "vietnamese"]
      responses:
        200:
          description: "Successful operation. PDF file generated."
          schema:
            type: "object"
            properties:
              pdf_content:
                type: "string"
                example: "JVBERi0xLjQNCg0K..."
                description: "Base64-encoded representation of the generated PDF file."
        400:
          description: |
            If any of the following conditions are true:
            - The XML File is invalid.
            - The language is invalid or not supported.
            - The token is invalid.
          schema:
            $ref: '#/definitions/ErrorReturn'
  /registerUser:
    post:
      tags:
      - "Authentication"
      summary: "register a new user to use the API"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User details to be registered"
        required: true
        schema:
          $ref: "#/definitions/UserDetails"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/TokenReturn"
        400:
          description: |
            If any of the following are true:
            - User already exists
            - The password does not contain:
              - At least 8 characters
              - Contain one uppercase letter
              - Contain one lowercase letter
              - Contain one number
          schema:
            $ref: '#/definitions/ErrorReturn'
  /loginUser:
    get:
      tags:
      - "Authentication"
      summary: "login in an existing user to retrieve their token"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User details to login"
        required: true
        schema:
          $ref: "#/definitions/UserDetails"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TokenReturn"
        400:
          description: |
            If any of the following are true:
            - User does not exist
            - The password is incorrect
          schema:
            $ref: '#/definitions/ErrorReturn'
  /deactivateUser:
    put:
      tags:
      - "Authentication"
      summary: "deactivate an existing user account"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User details to be deactivated"
        required: true
        schema:
          $ref: "#/definitions/UserDetails"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/EmptyReturn"
        400:
          description: |
            If any of the following are true:
            - User does not exist
            - The password is incorrect
          schema:
            $ref: '#/definitions/ErrorReturn'
  /reactivateUser:
    put:
      tags:
      - "Authentication"
      summary: "reactivate an existing user account"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User details to be reactivated"
        required: true
        schema:
          $ref: "#/definitions/UserDetails"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/EmptyReturn"
        400:
          description: |
            If any of the following are true:
            - User does not exist
            - The password is incorrect
            - The user is already active
          schema:
            $ref: '#/definitions/ErrorReturn'
  /changeUserPassword:
    put:
      tags:
      - "Authentication"
      summary: "change a user's password"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User details and new password"
        required: true
        schema:
          $ref: "#/definitions/ChangePassword"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/EmptyReturn"
        400:
          description: |
            If any of the following are true:
            - User does not exist
            - The password is incorrect
            - The user is already active
          schema:
            $ref: '#/definitions/ErrorReturn'
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  FileOutput:
    type: string
    example: "exampledomain.com/index.html"
  UserDetails:  
    type: "object"
    properties:
      username:
        type: "string"
      password:
        type: "string"
  ChangePassword:  
    type: "object"
    properties:
      username:
        type: "string"
      oldPassword:
        type: "string"
      newPassword:
        type: "string"
  TokenReturn:
    type: "object"
    properties:
      token:
        type: "string"
  ErrorReturn:
    type: "object"
    properties:
      error:
        type: "string"
  EmptyReturn:
    type: "object"
