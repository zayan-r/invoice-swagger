---
swagger: "2.0"
info:
  title: Sleeper Agents API Routes
  description: "This is a document containing the routes used in our API for invoice rendering"
tags:
- name: "rendering"
  description: "Routes for rendering invoices"
- name: "authentication"
  description: "Authenticating users"
schemes:
- "https"
- "http"
paths:
  /renderHTML:
    post:
      tags:
      - "rendering"
      summary: "render a HTML file from an inputted XML file"
      description: ""
      produces:
      - "application/json"
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
        - in: path
          required: true
          type: file
        - in: query
          name: language
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/FileOutput"
        400:
          description: |
            If any of the following are true:
            - The XML File is invalid
            - The language is invalid or not supported
            - The token is invalid
          schema:
            $ref: '#/definitions/ErrorReturn'
  /registerUser:
    post:
      tags:
      - "authentication"
      summary: "register a new user to use the API"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User details to be registered"
        required: true
        schema:
          $ref: "#/definitions/UserDetails"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/TokenReturn"
        400:
          description: |
            If any of the following are true:
            - User already exists
            - The password does not contain:
              - At least 8 characters
              - Contain one uppercase letter
              - Contain one lowercase letter
              - Contain one number
          schema:
            $ref: '#/definitions/ErrorReturn'
  /loginUser:
    get:
      tags:
      - "authentication"
      summary: "login in an existing user to retrieve their token"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User details to be registered"
        required: true
        schema:
          $ref: "#/definitions/UserDetails"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TokenReturn"
        400:
          description: |
            If any of the following are true:
            - User does not exist
            - The password is incorrect
          schema:
            $ref: '#/definitions/ErrorReturn'
  /deactivateUser:
    put:
      tags:
      - "authentication"
      summary: "deactivate an existing user account"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User details to be registered"
        required: true
        schema:
          $ref: "#/definitions/UserDetails"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/EmptyReturn"
        400:
          description: |
            If any of the following are true:
            - User does not exist
            - The password is incorrect
          schema:
            $ref: '#/definitions/ErrorReturn'
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  FileOutput:
    type: string
    example: "exampledomain.com/index.html"
  UserDetails:  
    type: "object"
    properties:
      username:
        type: "string"
      password:
        type: "string"
  TokenReturn:
    type: "object"
    properties:
      token:
        type: "string"
  ErrorReturn:
    type: "object"
    properties:
      error:
        type: "string"
  EmptyReturn:
    type: "object"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
